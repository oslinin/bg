https://hardhat.org/docs/getting-started
pnpm dlx hardhat --init
pnpm hardhat --help

hardhat.config.ts   #The main configuration file for your project. It defines settings like the Solidity compiler version, network configurations, and the plugins and tasks your project uses.
contracts           #Contains your project's Solidity contracts. You can also include Solidity test files here by using the .t.sol extension.
├── Counter.sol
└── Counter.t.sol
test                #Used for TypeScript integration tests. You can also include Solidity test files here.
└── Counter.ts
ignition            #Holds your Hardhat Ignition deployment modules, which describe how your contracts should be deployed.
└── modules
    └── Counter.ts
scripts             #place for any custom scripts that automate parts of your workflow. Scripts have full access to Hardhat's runtime and can use plugins, connect to networks, deploy contracts, and more.
└── send-op-tx.ts


#tests types
Solidity tests are ideal for fast, focused unit testing, but they fall short in certain situations:
To support these use cases, Hardhat lets you write tests in TypeScript (or JavaScript), using the Node.js test runner or other frameworks like Mocha. These tests run in a real Node.js environment and interact with your contracts through JSON-RPC, making them more representative of actual usage.
TypeScript a better fit for scenarios that depend on realistic transaction flows or blockchain behavior.


#Solidity test contracts/Counter.t.sol
pnpm hardhat test
pnpm hardhat test solidity
pnpm hardhat test BackgammonELO

#typescript tests test/Counter.ts
pnpm hardhat test nodejs
pnpm hardhat test test/BackgammonELO.ts

#run 
pnpm hardhat run scripts/send-op-tx.ts

#deploy
pnpm hardhat ignition deploy ignition/modules/Counter.ts
